/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package epos.slm3d.m3d;

import epos.slm3d.utils.Utils;
import epos.slm3d.utils.Values;

import java.io.BufferedWriter;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.Date;

import static epos.slm3d.settings.WorkSpace.ws;

/**
 *
 * @author Admin
 */
public class CNCViewerPanel extends BasePanel {
    private ViewNotifyer notify;
    private BufferedWriter logFile = null;
    private ViewAdapter viewCommon;
    private boolean stopOnWarning=false;
    /**
     * Creates new form CNCViewerPanel
     */
    public CNCViewerPanel(String name,BaseFrame baseFrame) {
        super(name,baseFrame);
        initComponents();
        Progress.setMaximum(100);
        Progress.setMinimum(0);
        Progress.setValue(0);
        notify = new ViewNotifyer(LOG,Progress){
            @Override
            public void notify(final int level0, final String mes) {
                super.notify(level0, mes);
                java.awt.EventQueue.invokeLater(
                        ()->{
                            if (level0>= Values.important && logFile!=null){
                                try {
                                    logFile.write(Utils.currentTime()+ " "+mes);
                                    logFile.newLine();
                                } catch (IOException ex) { closeLogFile(ex);}
                            }
                            if (level0>=Values.error){
                                viewCommon.finish();
                                PAUSE.setText("...");
                            }
                            if (level0 >Values.warning || stopOnWarning && level0==Values.warning){           // выше warning  - приостановить
                                if (viewCommon.isRunning()) {
                                    viewCommon.pause(true);
                                    PAUSE.setText("продолжить");
                                }
                            }
                        });
                }
            };
        ws().setNotify(notify);
        }

    @Override
    public void initView() {

    }

    @Override
    public int modeMask() {
        return BaseFrame.ModeAllReady;
        }
    @Override
    public boolean modeEnabled() {
        return true;
        }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        LOG = new java.awt.TextArea();
        PAUSE = new javax.swing.JButton();
        STOP = new javax.swing.JButton();
        BYSTEP = new javax.swing.JCheckBox();
        LEVEL = new javax.swing.JComboBox<>();
        Progress = new javax.swing.JProgressBar();
        LogStop = new javax.swing.JCheckBox();
        LogToFile = new javax.swing.JCheckBox();

        setLayout(null);
        add(LOG);
        LOG.setBounds(10, 10, 700, 650);

        PAUSE.setText("...");
        PAUSE.setPreferredSize(new java.awt.Dimension(91, 25));
        PAUSE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PAUSEActionPerformed(evt);
            }
        });
        add(PAUSE);
        PAUSE.setBounds(10, 670, 100, 25);

        STOP.setText("...");
        STOP.setPreferredSize(new java.awt.Dimension(81, 25));
        STOP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                STOPActionPerformed(evt);
            }
        });
        add(STOP);
        STOP.setBounds(120, 670, 100, 25);

        BYSTEP.setText("По шагам");
        add(BYSTEP);
        BYSTEP.setBounds(330, 670, 100, 20);

        LEVEL.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "информ.", "важное", "предупр.", "сбой" }));
        LEVEL.setPreferredSize(new java.awt.Dimension(72, 25));
        LEVEL.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                LEVELItemStateChanged(evt);
            }
        });
        add(LEVEL);
        LEVEL.setBounds(230, 670, 90, 25);
        add(Progress);
        Progress.setBounds(420, 670, 210, 20);

        LogStop.setText("Остановить лог");
        LogStop.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                LogStopItemStateChanged(evt);
            }
        });
        add(LogStop);
        LogStop.setBounds(640, 670, 120, 20);

        LogToFile.setText("Лог в файле");
        LogToFile.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                LogToFileItemStateChanged(evt);
            }
        });
        add(LogToFile);
        LogToFile.setBounds(760, 670, 120, 20);
    }// </editor-fold>//GEN-END:initComponents

    private void PAUSEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PAUSEActionPerformed
        if (!viewCommon.isRunning())
        return;
        if (viewCommon.changePause()){
            PAUSE.setText("продолжить");
        }
        else{
            PAUSE.setText("остановить");
        }
    }//GEN-LAST:event_PAUSEActionPerformed

    private void STOPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_STOPActionPerformed
        viewCommon.finish();
        PAUSE.setText("...");
        STOP.setText("...");
        getBaseFrame().sendEvent(EventOperate,EventOperateFinish,0,null,null);
    }//GEN-LAST:event_STOPActionPerformed

    private void LEVELItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_LEVELItemStateChanged
        notify.setLevel(LEVEL.getSelectedIndex());
    }//GEN-LAST:event_LEVELItemStateChanged

    private void LogStopItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_LogStopItemStateChanged
        notify.logSuspendState(LogStop.isSelected());
    }//GEN-LAST:event_LogStopItemStateChanged

    private void LogToFileItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_LogToFileItemStateChanged
        if (LogToFile.isSelected())
        openLogFile();
        else
        closeLogFile(null);
    }//GEN-LAST:event_LogToFileItemStateChanged

    @Override
    public void refresh() {
        }

    @Override
    public void onEvent(int code, int par1, long par2, String par3, Object oo) {
        switch (code){
            case EventLog:
                notify.notify(par1,par3);
                break;
            case EventLogFile:
                if (par1==EventLogFileClose)
                    closeLogFile(null);
                if (par1==EventLogFileOpen)
                    openLogFile();
                break;
            case EventOnWarning:
                stopOnWarning = par1!=0;
                break;
        }
    }

    @Override
    public void shutDown() {
        }

    public void openLogFile(){
        if (logFile!=null)
            return;
        try {
            Date xx = new Date();
            if (ws().modelName().length()==0){
                notify.log("Лог-файл только с моделью");
                LogToFile.setSelected(false);
                return;
            }
            String fname = ws().defaultDir()+ws().modelName()+"_log "+Utils.currentLogName()+".txt";
            ws().testDefaultDir();
            logFile = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(fname),"Windows-1251"));
            LogToFile.setSelected(true);
        } catch (Exception ex) {
            notify.notify(Values.error, ex.getMessage());
        }
    }
    private void closeLogFile(Exception ex){
        if (logFile==null)
            return;
        try { logFile.flush(); logFile.close(); } catch (IOException ex1) {}
        logFile=null;
        LogToFile.setSelected(false);
        if (ex!=null)
            notify.notify(Values.error, ex.getMessage());
        }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox BYSTEP;
    private javax.swing.JComboBox<String> LEVEL;
    private java.awt.TextArea LOG;
    private javax.swing.JCheckBox LogStop;
    private javax.swing.JCheckBox LogToFile;
    private javax.swing.JButton PAUSE;
    private javax.swing.JProgressBar Progress;
    private javax.swing.JButton STOP;
    // End of variables declaration//GEN-END:variables
}
