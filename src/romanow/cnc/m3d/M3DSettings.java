/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package romanow.cnc.m3d;

import romanow.cnc.settings.Settings;
import romanow.cnc.settings.WorkSpace;
import romanow.cnc.slicer.SliceData;
import romanow.cnc.stl.MyAngle;
import romanow.cnc.utils.I_Notify;

import java.awt.Color;

import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.util.Locale;

/**
 *
 * @author romanow
 */
public class M3DSettings extends javax.swing.JFrame {

    /**
     * Creates new form M3SSettings
     */
    private Settings set;
    private I_ViewParent parent;
    public M3DSettings(I_ViewParent parent0,Settings set0, String title) {
        initComponents();
        parent = parent0;
        Mode.addItem("Линии");
        Mode.addItem("Клетки");
        Mode.addItem("Контур");
        set = set0;
        setTitle(title);
        this.setBounds(100,100, 800, 650);
        loadSettings();
        boolean local = (set == WorkSpace.ws().local());
        MarkingFieldHight.setVisible(local);
        MarkingFieldWidth.setVisible(local);
        PageServoOffsetsLeft.setVisible(local);
        PageServoOffsetsTop.setVisible(local);
        Z.setVisible(local);
        RotateButton.setVisible(local);
        ANGLE.setVisible(local);
        XYZ.setVisible(local);
        LabelXYZ.setVisible(local);
        Zstart.setVisible(local);
        Zfinish.setVisible(local);
        CenterOffsetX.setVisible(local);
        AutoCenter.setEnabled(!local);
        AutoScale.setEnabled(!local);
        ScaleFactor.setEditable(!local);
        ScaleFactor.setBackground(!local ? Color.white : new Color(220,220,220));
        CurrentLayer.setVisible(!local);
        CurrentLine.setVisible(!local);
        CurrentLayer.setEditable(false);
        CurrentLine.setEditable(false); 
        LCurrentLayer.setVisible(!local);
        LCurrentLine.setVisible(!local);
        CenterXY.setVisible(!local);
        CenterXY1.setVisible(!local);
        CenterOffsetX.setVisible(!local);        
        CenterOffsetY.setVisible(!local);        
        boolean bb= set!=WorkSpace.ws().temp();
        Save.setVisible(bb);
        Z0_1.setVisible(bb);
        Z0_2.setVisible(bb);
        MoveOptimize.setVisible(bb);        
        IP.setVisible(!local);
        IPLabel.setVisible(!local);
        ThreadNum.setVisible(!local);
        ThreadLabel.setVisible(!local);
        Motor1Label.setVisible(!local);
        Motor3Label.setVisible(!local);
        Motor4Label.setVisible(!local);
        Motor1Pos.setVisible(!local);
        Motor3Pos.setVisible(!local);
        Motor4Pos.setVisible(!local);
        }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        MarkingFieldWidth = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        Z = new javax.swing.JTextField();
        MarkingFieldThickness = new javax.swing.JTextField();
        PageServoOffsetsLeft = new javax.swing.JTextField();
        PageServoOffsetsTop = new javax.swing.JTextField();
        ScaleFactor = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        VerticalStep = new javax.swing.JTextField();
        Save = new javax.swing.JButton();
        LOG = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        FillParametersRaster = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        FillParametersOffset = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        FillParametersAngle = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        FillParametersFillCell = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        FillingFlatness = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        FillParametersAngleInc = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        Mode = new java.awt.Choice();
        AutoCenter = new javax.swing.JCheckBox();
        AutoScale = new javax.swing.JCheckBox();
        RotateButton = new javax.swing.JButton();
        jLabel22 = new javax.swing.JLabel();
        MarkingFieldHight = new javax.swing.JTextField();
        ANGLE = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        LabelXYZ = new javax.swing.JLabel();
        Zstart = new javax.swing.JTextField();
        CenterOffsetX = new javax.swing.JTextField();
        CenterXY = new javax.swing.JLabel();
        Z0_2 = new javax.swing.JLabel();
        L1 = new javax.swing.JTextField();
        L2 = new javax.swing.JTextField();
        L3 = new javax.swing.JTextField();
        L4 = new javax.swing.JTextField();
        L5 = new javax.swing.JTextField();
        X1 = new javax.swing.JTextField();
        X2 = new javax.swing.JTextField();
        P1 = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        P2 = new javax.swing.JTextField();
        D1 = new javax.swing.JTextField();
        D2 = new javax.swing.JTextField();
        D3 = new javax.swing.JTextField();
        D4 = new javax.swing.JTextField();
        D5 = new javax.swing.JTextField();
        P4 = new javax.swing.JTextField();
        P3 = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        jSeparator5 = new javax.swing.JSeparator();
        jSeparator6 = new javax.swing.JSeparator();
        MoveOptimize = new javax.swing.JCheckBox();
        LineBlock = new javax.swing.JCheckBox();
        jSeparator3 = new javax.swing.JSeparator();
        CurrentLine = new javax.swing.JTextField();
        CurrentLayer = new javax.swing.JTextField();
        LCurrentLine = new javax.swing.JLabel();
        LCurrentLayer = new javax.swing.JLabel();
        IP = new javax.swing.JTextField();
        IPLabel = new javax.swing.JLabel();
        jSeparator7 = new javax.swing.JSeparator();
        SendLoops = new javax.swing.JCheckBox();
        Zfinish = new javax.swing.JTextField();
        CenterOffsetY = new javax.swing.JTextField();
        Z0_1 = new javax.swing.JLabel();
        CenterXY1 = new javax.swing.JLabel();
        XYZ = new javax.swing.JComboBox<>();
        jSeparator8 = new javax.swing.JSeparator();
        jLabel37 = new javax.swing.JLabel();
        ThreadLabel = new javax.swing.JLabel();
        ThreadNum = new javax.swing.JTextField();
        Motor4Label = new javax.swing.JLabel();
        Motor1Label = new javax.swing.JLabel();
        Motor3Label = new javax.swing.JLabel();
        Motor4Pos = new javax.swing.JTextField();
        Motor3Pos = new javax.swing.JTextField();
        Motor1Pos = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(null);
        getContentPane().add(jLabel1);
        jLabel1.setBounds(30, 20, 34, 0);

        MarkingFieldWidth.setEnabled(false);
        getContentPane().add(MarkingFieldWidth);
        MarkingFieldWidth.setBounds(160, 30, 80, 25);

        jLabel2.setText("Фактура");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(260, 40, 80, 14);

        Z.setEnabled(false);
        getContentPane().add(Z);
        Z.setBounds(160, 180, 80, 25);
        getContentPane().add(MarkingFieldThickness);
        MarkingFieldThickness.setBounds(160, 90, 80, 25);

        PageServoOffsetsLeft.setEnabled(false);
        PageServoOffsetsLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PageServoOffsetsLeftActionPerformed(evt);
            }
        });
        getContentPane().add(PageServoOffsetsLeft);
        PageServoOffsetsLeft.setBounds(160, 120, 80, 25);

        PageServoOffsetsTop.setEnabled(false);
        getContentPane().add(PageServoOffsetsTop);
        PageServoOffsetsTop.setBounds(160, 150, 80, 25);
        getContentPane().add(ScaleFactor);
        ScaleFactor.setBounds(160, 210, 80, 25);

        jLabel8.setText("Масштаб модели");
        getContentPane().add(jLabel8);
        jLabel8.setBounds(10, 220, 110, 14);
        getContentPane().add(VerticalStep);
        VerticalStep.setBounds(400, 240, 80, 25);

        Save.setText("Сохранить");
        Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveActionPerformed(evt);
            }
        });
        getContentPane().add(Save);
        Save.setBounds(10, 570, 100, 23);

        LOG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LOGActionPerformed(evt);
            }
        });
        getContentPane().add(LOG);
        LOG.setBounds(120, 570, 630, 30);

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel10.setText("Слайсинг");
        getContentPane().add(jLabel10);
        jLabel10.setBounds(260, 10, 80, 20);

        jLabel11.setText("Размер по X (мм)");
        getContentPane().add(jLabel11);
        jLabel11.setBounds(10, 40, 110, 20);

        jLabel12.setText("Размер по Z (мм)");
        getContentPane().add(jLabel12);
        jLabel12.setBounds(10, 190, 110, 14);

        jLabel13.setText("MarkingField Thickness");
        getContentPane().add(jLabel13);
        jLabel13.setBounds(10, 100, 130, 14);

        jLabel14.setText("Смещение X влево (мм)");
        getContentPane().add(jLabel14);
        jLabel14.setBounds(10, 130, 140, 14);

        jLabel15.setText("Смещение  Y вверх (мм)");
        getContentPane().add(jLabel15);
        jLabel15.setBounds(10, 160, 140, 14);
        getContentPane().add(FillParametersRaster);
        FillParametersRaster.setBounds(400, 60, 80, 25);

        jLabel16.setText("Шаг растра (мм)");
        getContentPane().add(jLabel16);
        jLabel16.setBounds(260, 70, 120, 14);
        getContentPane().add(FillParametersOffset);
        FillParametersOffset.setBounds(400, 90, 80, 25);

        jLabel17.setText("Смещение клетки (мм)");
        getContentPane().add(jLabel17);
        jLabel17.setBounds(260, 100, 140, 14);
        getContentPane().add(FillParametersAngle);
        FillParametersAngle.setBounds(400, 120, 80, 25);

        jLabel18.setText("Угол начальный (град)");
        getContentPane().add(jLabel18);
        jLabel18.setBounds(260, 130, 130, 10);
        getContentPane().add(FillParametersFillCell);
        FillParametersFillCell.setBounds(400, 180, 80, 25);

        jLabel19.setText("Размер клетки (мм)");
        getContentPane().add(jLabel19);
        jLabel19.setBounds(260, 190, 120, 14);
        getContentPane().add(FillingFlatness);
        FillingFlatness.setBounds(400, 210, 80, 25);

        jLabel20.setText("Установка на  строку");
        getContentPane().add(jLabel20);
        jLabel20.setBounds(260, 470, 130, 14);
        getContentPane().add(FillParametersAngleInc);
        FillParametersAngleInc.setBounds(400, 150, 80, 25);

        jLabel21.setText("Приращение угла (град)");
        getContentPane().add(jLabel21);
        jLabel21.setBounds(260, 160, 150, 14);

        Mode.setBackground(new java.awt.Color(240, 240, 240));
        getContentPane().add(Mode);
        Mode.setBounds(370, 30, 110, 25);

        AutoCenter.setSelected(true);
        AutoCenter.setText("АвтоЦентр");
        getContentPane().add(AutoCenter);
        AutoCenter.setBounds(10, 360, 100, 23);

        AutoScale.setSelected(true);
        AutoScale.setText("АвтоМасштаб");
        AutoScale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AutoScaleActionPerformed(evt);
            }
        });
        getContentPane().add(AutoScale);
        AutoScale.setBounds(10, 400, 110, 23);

        RotateButton.setText("Поворот");
        RotateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RotateButtonActionPerformed(evt);
            }
        });
        getContentPane().add(RotateButton);
        RotateButton.setBounds(140, 440, 100, 23);

        jLabel22.setText("Размер по Y (мм)");
        getContentPane().add(jLabel22);
        jLabel22.setBounds(10, 70, 110, 14);

        MarkingFieldHight.setEnabled(false);
        getContentPane().add(MarkingFieldHight);
        MarkingFieldHight.setBounds(160, 60, 80, 25);

        ANGLE.setText("90");
        ANGLE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ANGLEActionPerformed(evt);
            }
        });
        getContentPane().add(ANGLE);
        ANGLE.setBounds(200, 400, 40, 25);

        jLabel23.setText("Шаг по Z (мм)");
        getContentPane().add(jLabel23);
        jLabel23.setBounds(260, 250, 110, 14);

        LabelXYZ.setText("Угол (град)");
        getContentPane().add(LabelXYZ);
        LabelXYZ.setBounds(180, 370, 70, 14);

        Zstart.setText("0");
        getContentPane().add(Zstart);
        Zstart.setBounds(160, 240, 80, 25);

        CenterOffsetX.setText("0");
        getContentPane().add(CenterOffsetX);
        CenterOffsetX.setBounds(180, 300, 60, 25);

        CenterXY.setText("Смещение центра Y (мм)");
        getContentPane().add(CenterXY);
        CenterXY.setBounds(10, 330, 160, 20);

        Z0_2.setText("Z конечное (мм) ");
        getContentPane().add(Z0_2);
        Z0_2.setBounds(10, 280, 120, 14);
        getContentPane().add(L1);
        L1.setBounds(670, 30, 80, 25);
        getContentPane().add(L2);
        L2.setBounds(670, 60, 80, 25);
        getContentPane().add(L3);
        L3.setBounds(670, 90, 80, 25);
        getContentPane().add(L4);
        L4.setBounds(670, 120, 80, 25);
        getContentPane().add(L5);
        L5.setBounds(670, 150, 80, 25);
        getContentPane().add(X1);
        X1.setBounds(670, 200, 80, 25);
        getContentPane().add(X2);
        X2.setBounds(670, 230, 80, 25);
        getContentPane().add(P1);
        P1.setBounds(670, 280, 80, 25);
        getContentPane().add(jSeparator1);
        jSeparator1.setBounds(260, 320, 210, 10);
        getContentPane().add(P2);
        P2.setBounds(670, 310, 80, 25);
        getContentPane().add(D1);
        D1.setBounds(400, 340, 80, 25);
        getContentPane().add(D2);
        D2.setBounds(400, 370, 80, 25);
        getContentPane().add(D3);
        D3.setBounds(400, 400, 80, 25);
        getContentPane().add(D4);
        D4.setBounds(400, 430, 80, 25);
        getContentPane().add(D5);
        D5.setBounds(400, 460, 80, 25);
        getContentPane().add(P4);
        P4.setBounds(670, 370, 80, 25);
        getContentPane().add(P3);
        P3.setBounds(670, 340, 80, 25);

        jLabel24.setText("Сглаживание (мм)");
        getContentPane().add(jLabel24);
        jLabel24.setBounds(260, 220, 130, 14);

        jLabel25.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel25.setText("Микро - точки");
        getContentPane().add(jLabel25);
        jLabel25.setBounds(500, 270, 90, 14);

        jLabel26.setText("Выключение лазера");
        getContentPane().add(jLabel26);
        jLabel26.setBounds(260, 380, 130, 14);

        jLabel27.setText("Установка в  позицию");
        getContentPane().add(jLabel27);
        jLabel27.setBounds(260, 410, 130, 14);

        jLabel28.setText("Активация  прожига");
        getContentPane().add(jLabel28);
        jLabel28.setBounds(260, 440, 120, 14);

        jLabel29.setText("Шаг М3 (0.01 мм) - порошок");
        getContentPane().add(jLabel29);
        jLabel29.setBounds(500, 240, 160, 14);

        jLabel30.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel30.setText("Задержки");
        getContentPane().add(jLabel30);
        jLabel30.setBounds(260, 330, 130, 14);

        jLabel31.setText("Включение лазера");
        getContentPane().add(jLabel31);
        jLabel31.setBounds(260, 350, 130, 14);

        jLabel32.setText("Частота лазера (гц)");
        getContentPane().add(jLabel32);
        jLabel32.setBounds(500, 40, 130, 14);

        jLabel33.setText("Процент мощности");
        getContentPane().add(jLabel33);
        jLabel33.setBounds(500, 70, 130, 14);

        jLabel34.setText("Тип модуляции");
        getContentPane().add(jLabel34);
        jLabel34.setBounds(500, 100, 130, 14);

        jLabel35.setText("Подавление (Suppress)");
        getContentPane().add(jLabel35);
        jLabel35.setBounds(500, 130, 160, 14);

        jLabel36.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel36.setText("Настройки ПО");
        getContentPane().add(jLabel36);
        jLabel36.setBounds(20, 480, 90, 14);

        jLabel38.setText("Частота DAC (гц)");
        getContentPane().add(jLabel38);
        jLabel38.setBounds(500, 160, 150, 14);

        jLabel42.setText("Отступ от конца линии");
        getContentPane().add(jLabel42);
        jLabel42.setBounds(500, 380, 130, 14);

        jLabel43.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel43.setText("Засыпка порошка");
        getContentPane().add(jLabel43);
        jLabel43.setBounds(500, 190, 130, 14);

        jLabel44.setText("Шаг М4 (0.01 мм) - образец");
        getContentPane().add(jLabel44);
        jLabel44.setBounds(500, 210, 160, 14);

        jLabel45.setText("Время прожига МТ");
        getContentPane().add(jLabel45);
        jLabel45.setBounds(500, 290, 160, 14);

        jLabel46.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel46.setText("Модель");
        getContentPane().add(jLabel46);
        jLabel46.setBounds(10, 10, 80, 20);

        jLabel47.setText("Скорость прожига (мм/c)");
        getContentPane().add(jLabel47);
        jLabel47.setBounds(500, 320, 160, 14);

        jLabel48.setText("Отступ от начала линии");
        getContentPane().add(jLabel48);
        jLabel48.setBounds(500, 350, 130, 14);
        getContentPane().add(jSeparator2);
        jSeparator2.setBounds(580, 152, 180, 0);
        getContentPane().add(jSeparator4);
        jSeparator4.setBounds(500, 180, 250, 2);
        getContentPane().add(jSeparator5);
        jSeparator5.setBounds(770, 330, 0, 2);
        getContentPane().add(jSeparator6);
        jSeparator6.setBounds(500, 260, 250, 2);

        MoveOptimize.setSelected(true);
        MoveOptimize.setText("Оптимизация перемещений");
        getContentPane().add(MoveOptimize);
        MoveOptimize.setBounds(260, 270, 200, 23);

        LineBlock.setText("Блочный вывод");
        getContentPane().add(LineBlock);
        LineBlock.setBounds(10, 440, 120, 23);
        getContentPane().add(jSeparator3);
        jSeparator3.setBounds(500, 400, 270, 20);

        CurrentLine.setEditable(false);
        CurrentLine.setBackground(new java.awt.Color(220, 220, 220));
        getContentPane().add(CurrentLine);
        CurrentLine.setBounds(670, 440, 80, 25);

        CurrentLayer.setEditable(false);
        CurrentLayer.setBackground(new java.awt.Color(220, 220, 220));
        getContentPane().add(CurrentLayer);
        CurrentLayer.setBounds(670, 410, 80, 25);

        LCurrentLine.setText("Текущая линия");
        getContentPane().add(LCurrentLine);
        LCurrentLine.setBounds(500, 450, 130, 14);

        LCurrentLayer.setText("Текущий слой");
        getContentPane().add(LCurrentLayer);
        LCurrentLayer.setBounds(500, 420, 130, 14);

        IP.setText("localhost");
        getContentPane().add(IP);
        IP.setBounds(120, 500, 120, 25);

        IPLabel.setText("IP контроллера");
        getContentPane().add(IPLabel);
        IPLabel.setBounds(20, 500, 90, 20);
        getContentPane().add(jSeparator7);
        jSeparator7.setBounds(120, 490, 360, 20);

        SendLoops.setText("Оконтуривание");
        getContentPane().add(SendLoops);
        SendLoops.setBounds(260, 290, 180, 23);

        Zfinish.setText("0");
        Zfinish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ZfinishActionPerformed(evt);
            }
        });
        getContentPane().add(Zfinish);
        Zfinish.setBounds(160, 270, 80, 25);

        CenterOffsetY.setText("0");
        getContentPane().add(CenterOffsetY);
        CenterOffsetY.setBounds(180, 330, 60, 25);

        Z0_1.setText("Z начальное (мм) ");
        getContentPane().add(Z0_1);
        Z0_1.setBounds(10, 250, 120, 14);

        CenterXY1.setText("Смещение центра X (мм)");
        getContentPane().add(CenterXY1);
        CenterXY1.setBounds(10, 305, 160, 20);

        XYZ.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "X", "Y", "Z" }));
        getContentPane().add(XYZ);
        XYZ.setBounds(140, 400, 50, 25);
        getContentPane().add(jSeparator8);
        jSeparator8.setBounds(10, 560, 760, 20);

        jLabel37.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel37.setText("Лазер");
        getContentPane().add(jLabel37);
        jLabel37.setBounds(500, 20, 90, 14);

        ThreadLabel.setText("Потоков");
        getContentPane().add(ThreadLabel);
        ThreadLabel.setBounds(20, 530, 50, 14);

        ThreadNum.setText("5");
        getContentPane().add(ThreadNum);
        ThreadNum.setBounds(120, 530, 60, 25);

        Motor4Label.setText("Мотор 4 - позиция");
        getContentPane().add(Motor4Label);
        Motor4Label.setBounds(500, 540, 110, 14);

        Motor1Label.setText("Мотор 1 - позиция");
        getContentPane().add(Motor1Label);
        Motor1Label.setBounds(500, 480, 110, 14);

        Motor3Label.setText("Мотор 3 - позиция");
        getContentPane().add(Motor3Label);
        Motor3Label.setBounds(500, 510, 110, 14);

        Motor4Pos.setEditable(false);
        Motor4Pos.setBackground(new java.awt.Color(220, 220, 220));
        getContentPane().add(Motor4Pos);
        Motor4Pos.setBounds(670, 530, 80, 25);

        Motor3Pos.setEditable(false);
        Motor3Pos.setBackground(new java.awt.Color(220, 220, 220));
        getContentPane().add(Motor3Pos);
        Motor3Pos.setBounds(670, 500, 80, 25);

        Motor1Pos.setEditable(false);
        Motor1Pos.setBackground(new java.awt.Color(220, 220, 220));
        getContentPane().add(Motor1Pos);
        Motor1Pos.setBounds(670, 470, 80, 25);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private boolean loadSettings(){
        try {
            set.setNotNull();
            DecimalFormatSymbols dfs = new DecimalFormatSymbols(Locale.US);
            DecimalFormat df = new DecimalFormat("0.000", dfs);
            DecimalFormat df2 = new DecimalFormat("0.00", dfs);
            MarkingFieldHight.setText(df2.format(set.local.MarkingFieldHight.getVal()));
            MarkingFieldWidth.setText(df2.format(set.local.MarkingFieldWidth.getVal()));
            Z.setText(df2.format(set.local.Z.getVal()));
            Zstart.setText(df2.format(set.local.ZStart.getVal()));
            Zfinish.setText(df2.format(set.local.ZFinish.getVal())); 
            CenterOffsetX.setText(df2.format(set.global.CenterOffsetX.getVal()));
            CenterOffsetY.setText(df2.format(set.global.CenterOffsetY.getVal()));
            PageServoOffsetsLeft.setText(df2.format(set.local.PageServoOffsetsLeft.getVal()));
            PageServoOffsetsTop.setText(df2.format(set.local.PageServoOffsetsTop.getVal()));
            ScaleFactor.setText(df.format(set.global.ScaleFactor.getVal()));
            VerticalStep.setText(df.format(set.local.VerticalStep.getVal()));
            Mode.select(set.filling.Mode.getVal());
            FillParametersRaster.setText(df.format(set.filling.FillParametersRaster.getVal()));
            FillParametersOffset.setText(df.format(set.filling.FillParametersOffset.getVal()));
            FillParametersAngle.setText(df.format(set.filling.FillParametersAngle.getVal()));
            FillParametersAngleInc.setText(df.format(set.filling.FillParametersAngleInc.getVal()));
            FillParametersFillCell.setText(df.format(set.filling.FillParametersFillCell.getVal()));
            FillingFlatness.setText(df.format(set.filling.FillingFlatness.getVal()));
            AutoCenter.setSelected(set.global.AutoCenter.getVal());
            AutoScale.setSelected(set.global.AutoScale.getVal());
            MoveOptimize.setSelected(set.filling.MoveOptimize.getVal());
            SendLoops.setSelected(set.filling.SendLoops.getVal());
            LineBlock.setSelected(set.global.LineBlock.getVal());
            CurrentLayer.setText(""+set.global.CurrentLayer.getVal());
            CurrentLine.setText(""+set.global.CurrentLine.getVal());
            //--------------------------------------------------------------------
            D1.setText(""+set.delays.LaserOn.getVal());
            D2.setText(""+set.delays.LaserOff.getVal());
            D3.setText(""+set.delays.MovingPenJumpDelay.getVal());
            D4.setText(""+set.delays.MovingPenMarkDelay.getVal());
            D5.setText(""+set.delays.MovingPenStrokeDelay.getVal());
            L1.setText(""+set.pulses.LaserFrequence.getVal());
            L2.setText(""+set.pulses.LaserPumpPower.getVal());
            L3.setText(""+set.pulses.LaserPulseType.getVal());
            L4.setText(""+set.pulses.LaserPulseSuppress.getVal());
            L5.setText(""+set.pulses.DACFrequence.getVal());
            P1.setText(""+set.marking.MicroStepsJump.getVal());
            P2.setText(""+set.marking.MicroStepsMark.getVal());
            P3.setText(""+set.marking.MarkTailsInput.getVal());
            P4.setText(""+set.marking.MarkTailsOutput.getVal());
            X1.setText(""+set.control.NextLayerMovingM4Step.getVal());
            X2.setText(""+set.control.NextLayerMovingM3Step.getVal());
            IP.setText(set.global.ControllerIP.getVal());
            ThreadNum.setText(""+set.global.SliceThreadNum.getVal());
            Motor1Pos.setText(""+set.global.M1CurrentPos.getVal());
            Motor3Pos.setText(""+set.global.M3CurrentPos.getVal());
            Motor4Pos.setText(""+set.global.M4CurrentPos.getVal());
            } catch (Exception ee){
                LOG.setText(ee.toString());
                return false; 
                }
        return true;
        }

    private boolean saveSettings(){
        try {
            set.local.MarkingFieldHight.setVal(Float.parseFloat(Z.getText()));
            set.local.MarkingFieldWidth.setVal(Float.parseFloat(MarkingFieldWidth.getText()));
            set.local.PageServoOffsetsLeft.setVal(Float.parseFloat(PageServoOffsetsLeft.getText()));
            set.local.PageServoOffsetsTop.setVal(Float.parseFloat(PageServoOffsetsTop.getText()));
            /** потеря точности при перезаписи ???? */
            set.global.ScaleFactor.setVal(Float.parseFloat(ScaleFactor.getText()));
            set.local.VerticalStep.setVal(Float.parseFloat(VerticalStep.getText()));
            set.local.ZStart.setVal(Float.parseFloat(Zstart.getText()));
            set.local.ZFinish.setVal(Float.parseFloat(Zfinish.getText()));
            set.global.CenterOffsetX.setVal(Float.parseFloat(CenterOffsetX.getText()));
            set.global.CenterOffsetY.setVal(Float.parseFloat(CenterOffsetY.getText()));
            set.filling.Mode.setVal(Mode.getSelectedIndex());
            set.filling.FillParametersRaster.setVal(Float.parseFloat(FillParametersRaster.getText()));
            set.filling.FillParametersOffset.setVal(Float.parseFloat(FillParametersOffset.getText()));
            set.filling.FillParametersAngle.setVal(Float.parseFloat(FillParametersAngle.getText()));
            set.filling.FillParametersAngleInc.setVal(Float.parseFloat(FillParametersAngleInc.getText()));
            set.filling.FillParametersFillCell.setVal(Float.parseFloat(FillParametersFillCell.getText()));
            set.filling.FillingFlatness.setVal(Float.parseFloat(FillingFlatness.getText()));
            set.global.AutoCenter.setVal(AutoCenter.isSelected());
            set.global.AutoScale.setVal(AutoScale.isSelected());
            set.filling.MoveOptimize.setVal(MoveOptimize.isSelected());
            set.filling.SendLoops.setVal(SendLoops.isSelected());
            set.global.LineBlock.setVal(LineBlock.isSelected());
            //----------------------------------------------------------------------------------------
            set.delays.LaserOn.setVal(Integer.parseInt(D1.getText()));
            set.delays.LaserOff.setVal(Integer.parseInt(D2.getText()));
            set.delays.MovingPenJumpDelay.setVal(Integer.parseInt(D3.getText()));
            set.delays.MovingPenMarkDelay.setVal(Integer.parseInt(D4.getText()));
            set.delays.MovingPenStrokeDelay.setVal(Integer.parseInt(D5.getText()));
            set.pulses.LaserFrequence.setVal(Integer.parseInt(L1.getText()));
            set.pulses.LaserPumpPower.setVal(Integer.parseInt(L2.getText()));
            set.pulses.LaserPulseType.setVal(Integer.parseInt(L3.getText()));
            set.pulses.LaserPulseSuppress.setVal(Integer.parseInt(L4.getText()));            
            set.pulses.DACFrequence.setVal(Integer.parseInt(L5.getText()));
            set.marking.MicroStepsJump.setVal(Integer.parseInt(P1.getText()));
            set.marking.MicroStepsMark.setVal(Integer.parseInt(P2.getText()));
            set.marking.MarkTailsInput.setVal(Integer.parseInt(P3.getText()));
            set.marking.MarkTailsOutput.setVal(Integer.parseInt(P4.getText()));
            set.control.NextLayerMovingM4Step.setVal(Integer.parseInt(X1.getText()));
            set.control.NextLayerMovingM3Step.setVal(Integer.parseInt(X2.getText()));
            set.global.ControllerIP.setVal(IP.getText());
            set.global.SliceThreadNum.setVal(Integer.parseInt(ThreadNum.getText()));
            set.global.M1CurrentPos.setVal(Integer.parseInt(Motor1Pos.getText()));
            set.global.M3CurrentPos.setVal(Integer.parseInt(Motor3Pos.getText()));
            set.global.M4CurrentPos.setVal(Integer.parseInt(Motor4Pos.getText()));
            if (set == WorkSpace.ws().global())                 // Только глобальные настройки
                WorkSpace.ws().saveSettings();
            } catch (Exception ee){
                LOG.setText(ee.toString());
                return false; 
                }
        return true;
        }
    
    private void SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveActionPerformed
        saveSettings();
        parent.onClose();
        dispose();
    }//GEN-LAST:event_SaveActionPerformed

    private void LOGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LOGActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_LOGActionPerformed

    private void PageServoOffsetsLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PageServoOffsetsLeftActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PageServoOffsetsLeftActionPerformed

    private void AutoScaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AutoScaleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AutoScaleActionPerformed

    I_Notify notify = new I_Notify() {
        @Override
        public void notify(int level, String mes) { LOG.setText(mes); }
        @Override
        public void setProgress(int proc) {}
        @Override
        public void info(String mes) { LOG.setText(mes); }
        @Override
        public void log(String mes) { LOG.setText(mes); }
    };

    private void RotateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RotateButtonActionPerformed
        double angle;
        try {
            angle = Double.parseDouble(ANGLE.getText())*Math.PI/180;
            } catch(Exception ee){
                LOG.setText("Недопустимое значение угла");
                return;
                }
        WorkSpace ws = WorkSpace.ws();
        ws.model().rotate(XYZ.getSelectedIndex(),new MyAngle(angle),notify);
        ws.model().shiftToCenter();
        ws.data(new SliceData());
        set.setZStartFinish();
        loadSettings();
        LOG.setText("Поворот выполнен");
    }//GEN-LAST:event_RotateButtonActionPerformed

    private void ANGLEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ANGLEActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ANGLEActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        parent.onClose();
    }//GEN-LAST:event_formWindowClosing

    private void ZfinishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ZfinishActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ZfinishActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(M3DSettings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(M3DSettings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(M3DSettings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(M3DSettings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new M3DSettings(null,new Settings(),"").setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ANGLE;
    private javax.swing.JCheckBox AutoCenter;
    private javax.swing.JCheckBox AutoScale;
    private javax.swing.JTextField CenterOffsetX;
    private javax.swing.JTextField CenterOffsetY;
    private javax.swing.JLabel CenterXY;
    private javax.swing.JLabel CenterXY1;
    private javax.swing.JTextField CurrentLayer;
    private javax.swing.JTextField CurrentLine;
    private javax.swing.JTextField D1;
    private javax.swing.JTextField D2;
    private javax.swing.JTextField D3;
    private javax.swing.JTextField D4;
    private javax.swing.JTextField D5;
    private javax.swing.JTextField FillParametersAngle;
    private javax.swing.JTextField FillParametersAngleInc;
    private javax.swing.JTextField FillParametersFillCell;
    private javax.swing.JTextField FillParametersOffset;
    private javax.swing.JTextField FillParametersRaster;
    private javax.swing.JTextField FillingFlatness;
    private javax.swing.JTextField IP;
    private javax.swing.JLabel IPLabel;
    private javax.swing.JTextField L1;
    private javax.swing.JTextField L2;
    private javax.swing.JTextField L3;
    private javax.swing.JTextField L4;
    private javax.swing.JTextField L5;
    private javax.swing.JLabel LCurrentLayer;
    private javax.swing.JLabel LCurrentLine;
    private javax.swing.JTextField LOG;
    private javax.swing.JLabel LabelXYZ;
    private javax.swing.JCheckBox LineBlock;
    private javax.swing.JTextField MarkingFieldHight;
    private javax.swing.JTextField MarkingFieldThickness;
    private javax.swing.JTextField MarkingFieldWidth;
    private java.awt.Choice Mode;
    private javax.swing.JLabel Motor1Label;
    private javax.swing.JTextField Motor1Pos;
    private javax.swing.JLabel Motor3Label;
    private javax.swing.JTextField Motor3Pos;
    private javax.swing.JLabel Motor4Label;
    private javax.swing.JTextField Motor4Pos;
    private javax.swing.JCheckBox MoveOptimize;
    private javax.swing.JTextField P1;
    private javax.swing.JTextField P2;
    private javax.swing.JTextField P3;
    private javax.swing.JTextField P4;
    private javax.swing.JTextField PageServoOffsetsLeft;
    private javax.swing.JTextField PageServoOffsetsTop;
    private javax.swing.JButton RotateButton;
    private javax.swing.JButton Save;
    private javax.swing.JTextField ScaleFactor;
    private javax.swing.JCheckBox SendLoops;
    private javax.swing.JLabel ThreadLabel;
    private javax.swing.JTextField ThreadNum;
    private javax.swing.JTextField VerticalStep;
    private javax.swing.JTextField X1;
    private javax.swing.JTextField X2;
    private javax.swing.JComboBox<String> XYZ;
    private javax.swing.JTextField Z;
    private javax.swing.JLabel Z0_1;
    private javax.swing.JLabel Z0_2;
    private javax.swing.JTextField Zfinish;
    private javax.swing.JTextField Zstart;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JSeparator jSeparator8;
    // End of variables declaration//GEN-END:variables
}
