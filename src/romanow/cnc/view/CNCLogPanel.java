/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package romanow.cnc.view;

import romanow.cnc.io.COMPortGDriver;
import romanow.cnc.io.I_COMPortGReceiver;
import romanow.cnc.settings.MashineSettings;
import romanow.cnc.slicer.SliceData;
import romanow.cnc.slicer.SliceDataGenerator;
import romanow.cnc.stl.GCodeLayer;
import romanow.cnc.stl.I_STLPoint2D;
import romanow.cnc.stl.STLLine;
import romanow.cnc.stl.STLPoint2D;
import romanow.cnc.utils.Events;
import romanow.cnc.utils.Pair;
import romanow.cnc.utils.UNIException;
import romanow.cnc.utils.Utils;
import romanow.cnc.Values;
import romanow.cnc.settings.WorkSpace;

import java.awt.*;
import java.io.*;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.StringTokenizer;

import romanow.cnc.m3d.ViewAdapter;
import romanow.cnc.m3d.ViewNotifyer;

import static romanow.cnc.Values.*;
import static romanow.cnc.utils.Utils.viewUpdate;

import romanow.cnc.m3d.Slice2DViewer;

/**
 *
 * @author Admin
 */
public class CNCLogPanel extends BasePanel {
    private ViewNotifyer notify;
    private BufferedWriter logFile = null;
    private ViewAdapter viewCommon = new ViewAdapter(null);
    private boolean stopOnWarning=false;
    private WorkSpace ws=null;
    private final COMPortGDriver driver = new COMPortGDriver();
    /**
     * Creates new form CNCViewerPanel
     */
    public CNCLogPanel(BaseFrame baseFrame, Dimension dim) {
        super(baseFrame,dim);
        initComponents();
        ws = WorkSpace.ws();
        if (dim.width!=0)
            setComponentsScale(dim);
        notify = new ViewNotifyer(LOG,null){
            @Override
            public void notify(final int level0, final String mes) {
                super.notify(level0, mes);
                LOG.append(mes);
                java.awt.EventQueue.invokeLater(
                        ()->{
                            if (level0>= Values.important && logFile!=null){
                                try {
                                    logFile.write(Utils.currentTime()+ " "+mes);
                                    logFile.newLine();
                                    } catch (IOException ex) { }
                                }
                            if (level0>=Values.error){
                                viewCommon.finish();
                                }
                            if (level0 >Values.warning || stopOnWarning && level0==Values.warning){           // выше warning  - приостановить
                                if (viewCommon.isRunning()) {
                                    viewCommon.pause(true);
                                    }
                                }
                            });
                }
            };
        viewCommon = new ViewAdapter(){       // Объект-адаптер для визуальных методов
            @Override
            public boolean onStepLine() {
                return false;
                }
            @Override
            public boolean onStepLayer() {
                return super.onStepLayer();
                }
            };
        ws.setNotify(notify,viewCommon);
        }

    private void toLog(String ss){
        notify.notify(common,ss);
        }

    @Override
    public String getName() {
        return "События";
    }

    @Override
    public int modeMask() {
        return PanelMain;
        }
    @Override
    public boolean modeEnabled() {
        return true;
        }

    @Override
    public void onActivate() {
        }

    @Override
    public void onDeactivate() {
        }


    @Override
    public void onClose() {
        }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        LOG = new java.awt.TextArea();

        setLayout(null);

        LOG.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        add(LOG);
        LOG.setBounds(10, 10, 1080, 730);
    }// </editor-fold>//GEN-END:initComponents
    //------------------------------------------------------------------------------------------------------------------
    @Override
    public void refresh() {
        }

    @Override
    public void onEvent(int code, int par1, long par2, String par3, Object oo) {
        switch (code){
            case Events.Log:
                LOG.append(par3);
                //notify.notify(par1,par3);
                break;
            case Events.LogFileClose:
                break;
            case Events.LogFileOpen:
                break;
            case Events.OnWarning:
                break;
        }
    }

    @Override
    public void shutDown() {
        }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.TextArea LOG;
    // End of variables declaration//GEN-END:variables
}
