/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package romanow.cnc.view;

import romanow.cnc.m3d.I_SettingsChanged;
import romanow.cnc.utils.Events;
import romanow.cnc.settings.Settings;
import romanow.cnc.settings.WorkSpace;
import romanow.cnc.slicer.SliceData;
import romanow.cnc.stl.MyAngle;
import romanow.cnc.utils.I_Notify;
import romanow.cnc.utils.Utils;
import romanow.cnc.Values;

import java.awt.*;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.util.Locale;
import romanow.cnc.settingsView.I_SettingsPanel;

/**
 *
 * @author romanow
 */
public class ModelSettingsPanel extends BasePanel  implements I_SettingsPanel{
    private Settings set;
    private I_SettingsChanged changed;
    private I_Notify notify;
    private boolean busy=false;
    /**
     * Creates new form M3SSettings
     */
    public ModelSettingsPanel(I_SettingsChanged changed0, Settings set0, I_Notify notify0) {
        super(null,null);
        initComponents();
        set = set0;
        changed = changed0;
        notify = notify0;
        loadSettings();
        }
    public ModelSettingsPanel(BaseFrame base, Dimension dim) {
        super(base,dim);
        WorkSpace ws = WorkSpace.ws();
        set = ws.local();
        notify = ws.getNotify();
        initComponents();
        busy = true;
        Mode2.removeAll();
        Mode2.addItem("Растр");
        Mode2.addItem("Клетки");
        Mode2.addItem("Случайная");
        Mode2.addItem("Фреза-1");
        busy = false;
        }

    @Override
    public String getName() {
        return "Модель";
    }

    @Override
    public int modeMask() {
        return Values.PanelModelSettings;
    }

    @Override
    public boolean modeEnabled() {
        return true;
    }

    @Override
    public void onActivate() {
        loadSettings();
        }
    @Override
    public void onDeactivate() {

    }

    @Override
    public void onClose() {
        }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        MarkingFieldWidth = new javax.swing.JTextField();
        Z = new javax.swing.JTextField();
        PageServoOffsetsLeft = new javax.swing.JTextField();
        PageServoOffsetsTop = new javax.swing.JTextField();
        ScaleFactor = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        RotateButton = new javax.swing.JButton();
        jLabel22 = new javax.swing.JLabel();
        MarkingFieldHight = new javax.swing.JTextField();
        ANGLE = new javax.swing.JTextField();
        Zstart = new javax.swing.JTextField();
        Z0_2 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator5 = new javax.swing.JSeparator();
        Zfinish = new javax.swing.JTextField();
        Z0_1 = new javax.swing.JLabel();
        XYZ = new javax.swing.JComboBox<>();
        jLabel25 = new javax.swing.JLabel();
        PrintTime = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        LineCount = new javax.swing.JTextField();
        LineLength = new javax.swing.JTextField();
        MoveProc = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        SliceTime = new javax.swing.JTextField();
        ShiftButton = new javax.swing.JButton();
        SHIFT = new javax.swing.JTextField();
        XYZShift = new javax.swing.JComboBox<>();
        Z0_3 = new javax.swing.JLabel();
        Z0_4 = new javax.swing.JLabel();
        BlankHight = new javax.swing.JTextField();
        BlankWidth = new javax.swing.JTextField();
        CutterDiameter = new javax.swing.JTextField();
        Z0_5 = new javax.swing.JLabel();
        Z0_6 = new javax.swing.JLabel();
        StepMinus = new javax.swing.JTextField();
        VerticalStep = new javax.swing.JTextField();
        Z0_7 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        FillParametersOffset = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        FillParametersAngle = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        FillParametersFillCell = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        FillingFlatness = new javax.swing.JTextField();
        FillParametersAngleInc = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        MoveOptimize = new javax.swing.JCheckBox();
        SendLoops = new javax.swing.JCheckBox();
        jLabel39 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        FillParametersRaster = new javax.swing.JTextField();
        FlateCircuitSlice = new javax.swing.JCheckBox();
        Continuous = new javax.swing.JCheckBox();
        RepairLoops = new javax.swing.JCheckBox();
        LoopsWithSomeLineTypes = new javax.swing.JCheckBox();
        Mode2 = new javax.swing.JComboBox<>();
        BlankZ = new javax.swing.JTextField();
        Z0_8 = new javax.swing.JLabel();

        setLayout(null);
        add(jLabel1);
        jLabel1.setBounds(30, 20, 34, 0);

        MarkingFieldWidth.setEditable(false);
        MarkingFieldWidth.setBackground(new java.awt.Color(200, 200, 200));
        MarkingFieldWidth.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        add(MarkingFieldWidth);
        MarkingFieldWidth.setBounds(160, 30, 80, 30);

        Z.setEditable(false);
        Z.setBackground(new java.awt.Color(200, 200, 200));
        Z.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        add(Z);
        Z.setBounds(160, 170, 80, 30);

        PageServoOffsetsLeft.setEditable(false);
        PageServoOffsetsLeft.setBackground(new java.awt.Color(200, 200, 200));
        PageServoOffsetsLeft.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        add(PageServoOffsetsLeft);
        PageServoOffsetsLeft.setBounds(160, 100, 80, 30);

        PageServoOffsetsTop.setEditable(false);
        PageServoOffsetsTop.setBackground(new java.awt.Color(200, 200, 200));
        PageServoOffsetsTop.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        add(PageServoOffsetsTop);
        PageServoOffsetsTop.setBounds(160, 135, 80, 30);

        ScaleFactor.setEditable(false);
        ScaleFactor.setBackground(new java.awt.Color(200, 200, 200));
        ScaleFactor.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        add(ScaleFactor);
        ScaleFactor.setBounds(160, 205, 80, 30);

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel8.setText("Масштаб модели");
        add(jLabel8);
        jLabel8.setBounds(10, 215, 130, 20);

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel10.setText("Статистика");
        add(jLabel10);
        jLabel10.setBounds(260, 10, 100, 20);

        jLabel11.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel11.setText("Размер по X (мм)");
        add(jLabel11);
        jLabel11.setBounds(10, 40, 110, 20);

        jLabel12.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel12.setText("Размер по Z (мм)");
        add(jLabel12);
        jLabel12.setBounds(10, 180, 110, 20);

        jLabel14.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel14.setText("Смещ. X влево (мм)");
        add(jLabel14);
        jLabel14.setBounds(10, 110, 170, 20);

        jLabel15.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel15.setText("Смещ.  Y вверх (мм)");
        add(jLabel15);
        jLabel15.setBounds(10, 145, 140, 16);

        jLabel16.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel16.setText("Время фрезер.");
        add(jLabel16);
        jLabel16.setBounds(260, 180, 110, 20);

        RotateButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        RotateButton.setText("Поворот");
        RotateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RotateButtonActionPerformed(evt);
            }
        });
        add(RotateButton);
        RotateButton.setBounds(380, 210, 120, 30);

        jLabel22.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel22.setText("Размер по Y (мм)");
        add(jLabel22);
        jLabel22.setBounds(10, 75, 120, 20);

        MarkingFieldHight.setEditable(false);
        MarkingFieldHight.setBackground(new java.awt.Color(200, 200, 200));
        MarkingFieldHight.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        add(MarkingFieldHight);
        MarkingFieldHight.setBounds(160, 65, 80, 30);

        ANGLE.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        ANGLE.setText("90");
        ANGLE.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ANGLEKeyPressed(evt);
            }
        });
        add(ANGLE);
        ANGLE.setBounds(320, 210, 50, 30);

        Zstart.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Zstart.setText("0");
        Zstart.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ZstartKeyPressed(evt);
            }
        });
        add(Zstart);
        Zstart.setBounds(160, 240, 80, 30);

        Z0_2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Z0_2.setText("Z конечное (мм) ");
        add(Z0_2);
        Z0_2.setBounds(10, 280, 120, 20);

        jLabel46.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel46.setText("Модель");
        add(jLabel46);
        jLabel46.setBounds(10, 10, 100, 20);
        add(jSeparator2);
        jSeparator2.setBounds(580, 152, 180, 0);
        add(jSeparator5);
        jSeparator5.setBounds(770, 330, 0, 3);

        Zfinish.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Zfinish.setText("0");
        Zfinish.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ZfinishKeyPressed(evt);
            }
        });
        add(Zfinish);
        Zfinish.setBounds(160, 275, 80, 30);

        Z0_1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Z0_1.setText("Шаг по вертикали (мм)");
        add(Z0_1);
        Z0_1.setBounds(530, 210, 150, 20);

        XYZ.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "X", "Y", "Z" }));
        add(XYZ);
        XYZ.setBounds(260, 210, 50, 30);

        jLabel25.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel25.setText("Линий");
        add(jLabel25);
        jLabel25.setBounds(260, 40, 80, 20);

        PrintTime.setEditable(false);
        PrintTime.setBackground(new java.awt.Color(200, 200, 200));
        PrintTime.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        add(PrintTime);
        PrintTime.setBounds(380, 170, 80, 30);

        jLabel26.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel26.setText("Длина  (м)");
        add(jLabel26);
        jLabel26.setBounds(260, 70, 80, 20);

        LineCount.setEditable(false);
        LineCount.setBackground(new java.awt.Color(200, 200, 200));
        LineCount.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        add(LineCount);
        LineCount.setBounds(380, 30, 80, 30);

        LineLength.setEditable(false);
        LineLength.setBackground(new java.awt.Color(200, 200, 200));
        LineLength.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        add(LineLength);
        LineLength.setBounds(380, 65, 80, 30);

        MoveProc.setEditable(false);
        MoveProc.setBackground(new java.awt.Color(200, 200, 200));
        MoveProc.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        add(MoveProc);
        MoveProc.setBounds(380, 100, 80, 30);

        jLabel27.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel27.setText("Холостой ход (%)");
        add(jLabel27);
        jLabel27.setBounds(260, 105, 120, 20);

        jLabel28.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel28.setText("Время слайсинга");
        add(jLabel28);
        jLabel28.setBounds(260, 145, 120, 20);

        SliceTime.setEditable(false);
        SliceTime.setBackground(new java.awt.Color(200, 200, 200));
        SliceTime.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        add(SliceTime);
        SliceTime.setBounds(380, 135, 80, 30);

        ShiftButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        ShiftButton.setText("Сдвиг");
        ShiftButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShiftButtonActionPerformed(evt);
            }
        });
        add(ShiftButton);
        ShiftButton.setBounds(380, 250, 120, 30);

        SHIFT.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        SHIFT.setText("10.0");
        SHIFT.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                SHIFTKeyPressed(evt);
            }
        });
        add(SHIFT);
        SHIFT.setBounds(320, 250, 50, 30);

        XYZShift.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "X", "Y", "Z" }));
        add(XYZShift);
        XYZShift.setBounds(260, 250, 50, 30);

        Z0_3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Z0_3.setText("Z начальное (мм) ");
        add(Z0_3);
        Z0_3.setBounds(10, 250, 130, 20);

        Z0_4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Z0_4.setText("Размер заготовки X(мм)");
        add(Z0_4);
        Z0_4.setBounds(530, 40, 170, 20);

        BlankHight.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        BlankHight.setText("0");
        BlankHight.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BlankHightKeyPressed(evt);
            }
        });
        add(BlankHight);
        BlankHight.setBounds(700, 65, 80, 30);

        BlankWidth.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        BlankWidth.setText("0");
        BlankWidth.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BlankWidthKeyPressed(evt);
            }
        });
        add(BlankWidth);
        BlankWidth.setBounds(700, 30, 80, 30);

        CutterDiameter.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        CutterDiameter.setText("0");
        CutterDiameter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                CutterDiameterKeyPressed(evt);
            }
        });
        add(CutterDiameter);
        CutterDiameter.setBounds(700, 135, 80, 30);

        Z0_5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Z0_5.setText("Размер заготовки Z(мм)");
        add(Z0_5);
        Z0_5.setBounds(530, 105, 170, 20);

        Z0_6.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Z0_6.setText("Диаметр фрезы (мм)");
        add(Z0_6);
        Z0_6.setBounds(530, 140, 150, 20);

        StepMinus.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        StepMinus.setText("0");
        StepMinus.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                StepMinusKeyPressed(evt);
            }
        });
        add(StepMinus);
        StepMinus.setBounds(700, 170, 80, 30);

        VerticalStep.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        VerticalStep.setText("0");
        VerticalStep.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                VerticalStepKeyPressed(evt);
            }
        });
        add(VerticalStep);
        VerticalStep.setBounds(700, 205, 80, 30);

        Z0_7.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Z0_7.setText("Коррекция шага (мм)");
        add(Z0_7);
        Z0_7.setBounds(530, 175, 150, 20);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Фактура");
        add(jLabel2);
        jLabel2.setBounds(10, 340, 110, 14);

        FillParametersOffset.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        FillParametersOffset.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                FillParametersOffsetKeyPressed(evt);
            }
        });
        add(FillParametersOffset);
        FillParametersOffset.setBounds(160, 400, 80, 30);

        jLabel17.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel17.setText("Смещение клетки (мм)");
        add(jLabel17);
        jLabel17.setBounds(10, 405, 160, 20);

        FillParametersAngle.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        FillParametersAngle.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                FillParametersAngleKeyPressed(evt);
            }
        });
        add(FillParametersAngle);
        FillParametersAngle.setBounds(160, 435, 80, 30);

        jLabel18.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel18.setText("Угол начальный (°)");
        add(jLabel18);
        jLabel18.setBounds(10, 440, 150, 20);

        FillParametersFillCell.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        FillParametersFillCell.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                FillParametersFillCellKeyPressed(evt);
            }
        });
        add(FillParametersFillCell);
        FillParametersFillCell.setBounds(160, 505, 80, 30);

        jLabel19.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel19.setText("Размер клетки (мм)");
        add(jLabel19);
        jLabel19.setBounds(10, 510, 140, 20);

        FillingFlatness.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        FillingFlatness.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                FillingFlatnessKeyPressed(evt);
            }
        });
        add(FillingFlatness);
        FillingFlatness.setBounds(160, 540, 80, 30);

        FillParametersAngleInc.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        FillParametersAngleInc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                FillParametersAngleIncKeyPressed(evt);
            }
        });
        add(FillParametersAngleInc);
        FillParametersAngleInc.setBounds(160, 470, 80, 30);

        jLabel21.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel21.setText("Приращение угла (°)");
        add(jLabel21);
        jLabel21.setBounds(10, 480, 140, 20);

        jLabel24.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel24.setText("Сглаживание (мм)");
        add(jLabel24);
        jLabel24.setBounds(10, 550, 140, 20);

        MoveOptimize.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        MoveOptimize.setText("Оптимизация перемещений");
        MoveOptimize.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                MoveOptimizeItemStateChanged(evt);
            }
        });
        add(MoveOptimize);
        MoveOptimize.setBounds(260, 335, 250, 24);

        SendLoops.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        SendLoops.setText("Оконтуривание");
        SendLoops.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                SendLoopsItemStateChanged(evt);
            }
        });
        add(SendLoops);
        SendLoops.setBounds(260, 405, 180, 20);

        jLabel39.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel39.setText("Слайсинг");
        add(jLabel39);
        jLabel39.setBounds(10, 310, 80, 20);

        jLabel20.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel20.setText("Шаг растра (мм)");
        add(jLabel20);
        jLabel20.setBounds(10, 370, 120, 20);

        FillParametersRaster.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        FillParametersRaster.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                FillParametersRasterKeyPressed(evt);
            }
        });
        add(FillParametersRaster);
        FillParametersRaster.setBounds(160, 365, 80, 30);

        FlateCircuitSlice.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        FlateCircuitSlice.setText("Слайсинг плоских контуров");
        FlateCircuitSlice.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                FlateCircuitSliceItemStateChanged(evt);
            }
        });
        add(FlateCircuitSlice);
        FlateCircuitSlice.setBounds(260, 440, 240, 24);

        Continuous.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Continuous.setText("Непрерывная штриховка / Зигзаг");
        Continuous.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ContinuousItemStateChanged(evt);
            }
        });
        add(Continuous);
        Continuous.setBounds(260, 370, 270, 24);

        RepairLoops.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        RepairLoops.setText("Принудительно замыкать контуры");
        RepairLoops.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                RepairLoopsItemStateChanged(evt);
            }
        });
        add(RepairLoops);
        RepairLoops.setBounds(260, 475, 280, 24);

        LoopsWithSomeLineTypes.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        LoopsWithSomeLineTypes.setText("Контуры из отрезков одного типа");
        LoopsWithSomeLineTypes.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                LoopsWithSomeLineTypesItemStateChanged(evt);
            }
        });
        add(LoopsWithSomeLineTypes);
        LoopsWithSomeLineTypes.setBounds(260, 510, 260, 24);

        Mode2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                Mode2ItemStateChanged(evt);
            }
        });
        add(Mode2);
        Mode2.setBounds(110, 330, 130, 30);

        BlankZ.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        BlankZ.setText("0");
        BlankZ.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BlankZKeyPressed(evt);
            }
        });
        add(BlankZ);
        BlankZ.setBounds(700, 100, 80, 30);

        Z0_8.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Z0_8.setText("Размер заготовки Y(мм)");
        add(Z0_8);
        Z0_8.setBounds(530, 70, 170, 20);
    }// </editor-fold>//GEN-END:initComponents
    public boolean loadSettings(){
        try {
            WorkSpace ws = WorkSpace.ws();
            set = ws.global();
            busy = true;
            set.setNotNull();
            DecimalFormatSymbols dfs = new DecimalFormatSymbols(Locale.US);
            DecimalFormat df = new DecimalFormat("0.000", dfs);
            DecimalFormat df2 = new DecimalFormat("0.00", dfs);
            DecimalFormat df3 = new DecimalFormat("000.0", dfs);
            MarkingFieldHight.setText(df2.format(set.model.ModelHight.getVal()));
            MarkingFieldWidth.setText(df2.format(set.model.ModelWidth.getVal()));
            BlankHight.setText(df2.format(set.model.BlankHight.getVal()*2));
            BlankWidth.setText(df2.format(set.model.BlankWidth.getVal()*2));
            BlankZ.setText(df2.format(set.model.BlankZ.getVal()));
            CutterDiameter.setText(df2.format(set.model.CutterDiameter.getVal()));
            StepMinus.setText(df2.format(set.model.StepMinus.getVal()));
            VerticalStep.setText(df2.format(set.model.VerticalStep.getVal()));
            Z.setText(df2.format(set.model.ModelZ.getVal()));
            Zstart.setText(df2.format(set.model.ZStart.getVal()));
            Zfinish.setText(df2.format(set.model.ZFinish.getVal()));
            PageServoOffsetsLeft.setText(df2.format(set.model.PageServoOffsetsLeft.getVal()));
            PageServoOffsetsTop.setText(df2.format(set.model.PageServoOffsetsTop.getVal()));
            ScaleFactor.setText(df.format(set.model.ScaleFactor.getVal()));
            LineCount.setText(""+set.statistic.LineCount.getVal());
            LineLength.setText(set.statistic.printLength());
            MoveProc.setText(""+set.statistic.moveProc());
            PrintTime.setText(set.statistic.printTime());
            SliceTime.setText(set.statistic.sliceTime());
            //------------------------------------------------------------------------
            //VerticalStep.setText(df.format(set.slice.VerticalStep.getVal()));
            Mode2.setSelectedIndex(set.slice.Mode.getVal());
            FillParametersRaster.setText(df.format(set.slice.FillParametersRaster.getVal()));
            FillParametersOffset.setText(df.format(set.slice.FillParametersOffset.getVal()));
            FillParametersAngle.setText(df.format(set.slice.FillParametersAngle.getVal()));
            FillParametersAngleInc.setText(df.format(set.slice.FillParametersAngleInc.getVal()));
            FillParametersFillCell.setText(df.format(set.slice.FillParametersFillCell.getVal()));
            FillingFlatness.setText(df.format(set.slice.FillingFlatness.getVal()));
            MoveOptimize.setSelected(set.slice.MoveOptimize.getVal());
            SendLoops.setSelected(set.slice.SendLoops.getVal());
            Continuous.setSelected(set.slice.FillContinuous.getVal());
            FlateCircuitSlice.setSelected(set.slice.FlateCircuitSlice.getVal());
            Continuous.setVisible(MoveOptimize.isSelected());
            RepairLoops.setSelected(set.slice.RepairLoops.getVal());
            LoopsWithSomeLineTypes.setSelected(set.slice.LoopsWithSomeLineTypes.getVal());
            } catch (Exception ee){
                notify.notify(Values.error, Utils.createFatalMessage(ee,5));
                busy = false;
                return false; 
                }
            busy=false;
        return true;
        }

    public boolean saveSettings(String par){
        try {
            WorkSpace ws = WorkSpace.ws();
            Settings set = ws.local();
            set.model.ZStart.setVal(Float.parseFloat(Zstart.getText()));
            set.model.ZFinish.setVal(Float.parseFloat(Zfinish.getText()));
            set.model.BlankWidth.setVal(Float.parseFloat(BlankWidth.getText())/2);
            set.model.BlankHight.setVal(Float.parseFloat(BlankHight.getText())/2);
            set.model.BlankZ.setVal(Float.parseFloat(BlankZ.getText()));
            set.model.CutterDiameter.setVal(Float.parseFloat(CutterDiameter.getText()));
            set.model.StepMinus.setVal(Float.parseFloat(StepMinus.getText()));
            set.model.VerticalStep.setVal(Float.parseFloat(VerticalStep.getText()));
            //---------------------------------------------------------------------------------------
            set.slice.Mode.setVal(Mode2.getSelectedIndex());
            set.slice.FillParametersRaster.setVal(Float.parseFloat(FillParametersRaster.getText()));
            set.slice.FillParametersOffset.setVal(Float.parseFloat(FillParametersOffset.getText()));
            set.slice.FillParametersAngle.setVal(Float.parseFloat(FillParametersAngle.getText()));
            set.slice.FillParametersAngleInc.setVal(Float.parseFloat(FillParametersAngleInc.getText()));
            set.slice.FillParametersFillCell.setVal(Float.parseFloat(FillParametersFillCell.getText()));
            set.slice.FillingFlatness.setVal(Float.parseFloat(FillingFlatness.getText()));
            set.slice.MoveOptimize.setVal(MoveOptimize.isSelected());
            set.slice.SendLoops.setVal(SendLoops.isSelected());
            set.slice.FlateCircuitSlice.setVal(FlateCircuitSlice.isSelected());
            set.slice.FillContinuous.setVal(Continuous.isSelected());
            set.slice.RepairLoops.setVal(RepairLoops.isSelected());
            set.slice.LoopsWithSomeLineTypes.setVal(LoopsWithSomeLineTypes.isSelected());
            sendEvent(Events.Settings,0,0,null,null);
            if (par!=null)
                notify.notify(Values.info,"Изменен параметр: "+par);
            } catch (Exception ee){
                notify.notify(Values.error,ee.toString());
                return false; 
                }
        return true;
        }

    @Override
    public void refresh() {
        }

    @Override
    public void onEvent(int code, int par1, long par2, String par3, Object oo) {
        }
    @Override
    public void shutDown() {
        }


    private void RotateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RotateButtonActionPerformed
        double angle;
        try {
            angle = Double.parseDouble(ANGLE.getText())*Math.PI/180;
        } catch(Exception ee){
            notify.notify(Values.error,"Недопустимое значение угла");
            return;
        }
        WorkSpace ws = WorkSpace.ws();
        ws.model().rotate(XYZ.getSelectedIndex(),new MyAngle(angle),notify);
        ws.model().shiftToCenter();
        ws.data(new SliceData());
        Settings set = ws.local();
        ws.model().saveModelDimensions();
        set.setZStartFinish();
        loadSettings();
        notify.log(String.format("Поворот %2s %s",(String)XYZ.getSelectedItem(),ANGLE.getText()));
        ws.sendEvent(Events.Rotate);
    }//GEN-LAST:event_RotateButtonActionPerformed

    private void ShiftButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShiftButtonActionPerformed
        double shift;
        try {
            shift = Double.parseDouble(SHIFT.getText());
        } catch(Exception ee){
            notify.notify(Values.error,"Недопустимое значение сдвига");
            return;
            }
        //shift/=;
        WorkSpace ws = WorkSpace.ws();
        ws.model().shift(XYZShift.getSelectedIndex(),shift);
        ws.data(new SliceData());
        Settings set = ws.local();
        ws.model().saveModelDimensions();
        set.setZStartFinish();
        loadSettings();
        notify.log(String.format("Сдвиг %2s %s",(String)XYZShift.getSelectedItem(),SHIFT.getText()));
        ws.sendEvent(Events.Rotate);

    }//GEN-LAST:event_ShiftButtonActionPerformed

    private void BlankWidthKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BlankWidthKeyPressed
        Utils.saveKeyPressed(evt,set.model.BlankWidth,set,0.5,notify);
    }//GEN-LAST:event_BlankWidthKeyPressed

    private void BlankHightKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BlankHightKeyPressed
        Utils.saveKeyPressed(evt,set.model.BlankHight,set,0.5,notify);
    }//GEN-LAST:event_BlankHightKeyPressed

    private void CutterDiameterKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_CutterDiameterKeyPressed
        Utils.saveKeyPressed(evt,set.model.CutterDiameter,set,notify);
    }//GEN-LAST:event_CutterDiameterKeyPressed

    private void StepMinusKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_StepMinusKeyPressed
        Utils.saveKeyPressed(evt,set.model.StepMinus,set,notify);    }//GEN-LAST:event_StepMinusKeyPressed

    private void VerticalStepKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_VerticalStepKeyPressed
        Utils.saveKeyPressed(evt,set.model.VerticalStep,set,notify);
    }//GEN-LAST:event_VerticalStepKeyPressed

    private void ZstartKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ZstartKeyPressed
        Utils.saveKeyPressed(evt,set.model.ZStart,set,notify);
    }//GEN-LAST:event_ZstartKeyPressed

    private void ZfinishKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ZfinishKeyPressed
        Utils.saveKeyPressed(evt,set.model.ZFinish,set,notify);
    }//GEN-LAST:event_ZfinishKeyPressed

    private void ANGLEKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ANGLEKeyPressed
        if(evt.getKeyCode()!=10) return;
        double angle;
        try {
            angle = Double.parseDouble(ANGLE.getText())*Math.PI/180;
        } catch(Exception ee){
            notify.notify(Values.error,"Недопустимое значение угла");
            return;
        }
        WorkSpace ws = WorkSpace.ws();
        ws.model().rotate(XYZ.getSelectedIndex(),new MyAngle(angle),notify);
        ws.model().shiftToCenter();
        ws.data(new SliceData());
        Settings set = ws.local();
        ws.model().saveModelDimensions();
        set.setZStartFinish();
        loadSettings();
        notify.log(String.format("Поворот %2s %s",(String)XYZ.getSelectedItem(),ANGLE.getText()));
        ws.sendEvent(Events.Rotate);
    }//GEN-LAST:event_ANGLEKeyPressed

    private void SHIFTKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_SHIFTKeyPressed
        if(evt.getKeyCode()!=10) return;
        double shift;
        try {
            shift = Double.parseDouble(SHIFT.getText());
        } catch(Exception ee){
            notify.notify(Values.error,"Недопустимое значение сдвига");
            return;
        }
        //shift/=;
        WorkSpace ws = WorkSpace.ws();
        ws.model().shift(XYZShift.getSelectedIndex(),shift);
        ws.data(new SliceData());
        Settings set = ws.local();
        ws.model().saveModelDimensions();
        set.setZStartFinish();
        loadSettings();
        notify.log(String.format("Сдвиг %2s %s",(String)XYZShift.getSelectedItem(),SHIFT.getText()));
        ws.sendEvent(Events.Rotate);
    }//GEN-LAST:event_SHIFTKeyPressed

    private void MoveOptimizeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_MoveOptimizeItemStateChanged
        if (busy) return;
        set.slice.MoveOptimize.setVal(MoveOptimize.isSelected());
        Continuous.setVisible(MoveOptimize.isSelected());
        Utils.viewUpdateCheck(MoveOptimize,true);
    }//GEN-LAST:event_MoveOptimizeItemStateChanged

    private void ContinuousItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ContinuousItemStateChanged
        if (busy) return;
        set.slice.FillContinuous.setVal(Continuous.isSelected());
        Utils.viewUpdateCheck(Continuous,true);
    }//GEN-LAST:event_ContinuousItemStateChanged

    private void SendLoopsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_SendLoopsItemStateChanged
        if (busy) return;
        set.slice.SendLoops.setVal(SendLoops.isSelected());
        Utils.viewUpdateCheck(SendLoops,true);

    }//GEN-LAST:event_SendLoopsItemStateChanged

    private void FlateCircuitSliceItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_FlateCircuitSliceItemStateChanged
        if (busy) return;
        set.slice.FlateCircuitSlice.setVal(FlateCircuitSlice.isSelected());
        Utils.viewUpdateCheck(FlateCircuitSlice,true);
    }//GEN-LAST:event_FlateCircuitSliceItemStateChanged

    private void RepairLoopsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_RepairLoopsItemStateChanged
        if (busy) return;
        set.slice.RepairLoops.setVal(RepairLoops.isSelected());
        Utils.viewUpdateCheck(RepairLoops,true);
    }//GEN-LAST:event_RepairLoopsItemStateChanged

    private void LoopsWithSomeLineTypesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_LoopsWithSomeLineTypesItemStateChanged
        if (busy) return;
        set.slice.LoopsWithSomeLineTypes.setVal(LoopsWithSomeLineTypes.isSelected());
        Utils.viewUpdateCheck(LoopsWithSomeLineTypes,true);
    }//GEN-LAST:event_LoopsWithSomeLineTypesItemStateChanged

    private void Mode2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_Mode2ItemStateChanged
        if (busy) return;
        set.slice.Mode.setVal(Mode2.getSelectedIndex());
        Utils.viewUpdate(Mode2,true);
    }//GEN-LAST:event_Mode2ItemStateChanged

    private void FillParametersRasterKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FillParametersRasterKeyPressed
        Utils.saveKeyPressed(evt,set.slice.FillParametersRaster,set,notify);
    }//GEN-LAST:event_FillParametersRasterKeyPressed

    private void FillParametersOffsetKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FillParametersOffsetKeyPressed
        Utils.saveKeyPressed(evt,set.slice.FillParametersOffset,set,notify);
    }//GEN-LAST:event_FillParametersOffsetKeyPressed

    private void FillParametersAngleKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FillParametersAngleKeyPressed
        Utils.saveKeyPressed(evt,set.slice.FillParametersAngle,set,notify);
    }//GEN-LAST:event_FillParametersAngleKeyPressed

    private void FillParametersAngleIncKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FillParametersAngleIncKeyPressed
        Utils.saveKeyPressed(evt,set.slice.FillParametersAngleInc,set,notify);
    }//GEN-LAST:event_FillParametersAngleIncKeyPressed

    private void FillParametersFillCellKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FillParametersFillCellKeyPressed
        Utils.saveKeyPressed(evt,set.slice.FillParametersFillCell,set,notify);
    }//GEN-LAST:event_FillParametersFillCellKeyPressed

    private void FillingFlatnessKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FillingFlatnessKeyPressed
        Utils.saveKeyPressed(evt,set.slice.FillingFlatness,set,notify);
    }//GEN-LAST:event_FillingFlatnessKeyPressed

    private void BlankZKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BlankZKeyPressed
        Utils.saveKeyPressed(evt,set.model.BlankZ,set,notify);
    }//GEN-LAST:event_BlankZKeyPressed

    @Override
    public boolean saveSettings() {
        return saveSettings(null);
        }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ANGLE;
    private javax.swing.JTextField BlankHight;
    private javax.swing.JTextField BlankWidth;
    private javax.swing.JTextField BlankZ;
    private javax.swing.JCheckBox Continuous;
    private javax.swing.JTextField CutterDiameter;
    private javax.swing.JTextField FillParametersAngle;
    private javax.swing.JTextField FillParametersAngleInc;
    private javax.swing.JTextField FillParametersFillCell;
    private javax.swing.JTextField FillParametersOffset;
    private javax.swing.JTextField FillParametersRaster;
    private javax.swing.JTextField FillingFlatness;
    private javax.swing.JCheckBox FlateCircuitSlice;
    private javax.swing.JTextField LineCount;
    private javax.swing.JTextField LineLength;
    private javax.swing.JCheckBox LoopsWithSomeLineTypes;
    private javax.swing.JTextField MarkingFieldHight;
    private javax.swing.JTextField MarkingFieldWidth;
    private javax.swing.JComboBox<String> Mode2;
    private javax.swing.JCheckBox MoveOptimize;
    private javax.swing.JTextField MoveProc;
    private javax.swing.JTextField PageServoOffsetsLeft;
    private javax.swing.JTextField PageServoOffsetsTop;
    private javax.swing.JTextField PrintTime;
    private javax.swing.JCheckBox RepairLoops;
    private javax.swing.JButton RotateButton;
    private javax.swing.JTextField SHIFT;
    private javax.swing.JTextField ScaleFactor;
    private javax.swing.JCheckBox SendLoops;
    private javax.swing.JButton ShiftButton;
    private javax.swing.JTextField SliceTime;
    private javax.swing.JTextField StepMinus;
    private javax.swing.JTextField VerticalStep;
    private javax.swing.JComboBox<String> XYZ;
    private javax.swing.JComboBox<String> XYZShift;
    private javax.swing.JTextField Z;
    private javax.swing.JLabel Z0_1;
    private javax.swing.JLabel Z0_2;
    private javax.swing.JLabel Z0_3;
    private javax.swing.JLabel Z0_4;
    private javax.swing.JLabel Z0_5;
    private javax.swing.JLabel Z0_6;
    private javax.swing.JLabel Z0_7;
    private javax.swing.JLabel Z0_8;
    private javax.swing.JTextField Zfinish;
    private javax.swing.JTextField Zstart;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator5;
    // End of variables declaration//GEN-END:variables
}
