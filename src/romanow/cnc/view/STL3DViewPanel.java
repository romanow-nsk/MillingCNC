/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package romanow.cnc.view;

import com.sun.j3d.utils.universe.SimpleUniverse;
import romanow.cnc.Values;
import romanow.cnc.settings.WorkSpace;
import romanow.cnc.utils.Events;
import romanow.cnc.viewer3d.PCanvas3D;
import romanow.cnc.viewer3d.PModel;

import java.awt.*;

/**
 *
 * @author Admin
 */
public class STL3DViewPanel extends BasePanel {
    Thread thread=null;
    PCanvas3D canvas;
    PModel model;
    SimpleUniverse universe;
    double Scale0 = 0.1;
    /**
     * Creates new form STL3DViewPanel
     */

    @Override
    public void refresh(){
        }


    public STL3DViewPanel(BaseFrame baseFrame) {
        super(baseFrame);
        initComponents();
        //this.setBounds(150,150,800,640);
        setPreferredSize(new Dimension(Values.FrameWidth, Values.FrameHeight-Values.FrameBottom*2));
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        canvas = new PCanvas3D(config);
        canvas.setBounds(0,0,Values.FrameWidth, Values.FrameHeight-Values.FrameBottom*2);
        add(canvas, BorderLayout.CENTER);
        universe = new SimpleUniverse(canvas);
        canvas.initcanvas(universe);
        //pack();
        //setLocationRelativeTo(null);
        setVisible(true);
        //addWindowListener(this);
        //---- вернуть обратно ----------------------
        canvas.homeview(universe);
        }

    private void onClose(){
        universe.removeAllLocales();
        universe.cleanup();
        //if (thread!=null){          // Тупо обломить поток
        //    thread.stop();
        //    thread=null;
        //    }
        }

    @Override
    public String getName() {
        return "STL(3D)";
    }

    @Override
    public int modeMask() {
        return Values.PanelSTL3D;
        }

    @Override
    public boolean modeEnabled() {
        int dState =  WorkSpace.ws().dataState();
        return dState == Values.Sliced || dState==Values.Loaded;
        }

    @Override
    public void onInit(boolean on) {
        if (!on)
            return;
        if(model != null)
            model.cleanup();
        model = new PModel();
        model.setBnormstrip(true);
        //thread = new Thread(()->{       // выполнить в потоке вне GUI
        model.addTriangles(WorkSpace.ws().model().triangles(),0);
        canvas.rendermodel(model, universe);
        //    });
        //thread.start();
        }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents



    @Override
    public void onEvent(int code, int par1, long par2, String par3, Object oo) {
        if (code== Events.Init)
            refresh();
    }

    @Override
    public void shutDown() {

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
